name: 构建 && 推送

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
on:
  push:
    branches: ["main"]
    # Publish semver tags as releases.
    tags: ["v*.*.*"]
  workflow_dispatch:

# 仅允许管理员手动执行
permissions:
  contents: write
  pull-requests: write
  issues: write
  checks: write

env:
  # github.repository as <account>/<repo>
  IMAGE_NAME: corp-wechat-gptbot
  LOG_LEVEL: debug

jobs:
  buildImageAndPubilsh:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
      - name: 拉取仓库
        uses: actions/checkout@v3
      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: 安装登陆组件 cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: "v1.13.1"
      # 缓存 Docker 镜像以加速构建
      - name: 缓存层
        uses: actions/cache@v2.1.8
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

        # Add support for more platforms with QEMU (optional)
        # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up buildx
        uses: docker/setup-buildx-action@v2.5.0
      - name: 镜像标签
        run: |
          echo ${{ vars.DOCKER_HUB_TAG }}
          echo ${{ vars.GHCR_HUB_TAG }}
      - name: 查看构建器
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: 登入docker hub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: 登入Github仓库 ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: 构建并推送
        id: build-and-push
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ vars.DOCKER_HUB_TAG }}
            ${{ vars.GHCR_HUB_TAG }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the resulting Docker image digest
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}
      - name: 获取制品信息
        id: get-package-data-wx-msg
        run: |
          echo "user_email=$(git log -n 1 --pretty=format:%ae)" >> $env:GITHUB_OUTPUT
          echo "user_name=$(git log -1 --pretty=format:'%an')" >> $env:GITHUB_OUTPUT
          echo "commit_msg=$(git log -1 --pretty=%B)" >> $env:GITHUB_OUTPUT

